install.packages("dplyr")
install.packages("dplyr")
file.edit('~/.Renviron')
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
options(internet.info = 0)
install.packages("dplyr")
install.packages("dplyr")
file.edit('~/.Renviron')
Sys.setenv(http_proxy="http://wwwproxy.sandia.gov:80")
Sys.getenv("http_proxy")
Sys.setenv(https_proxy="http://wwwproxy.sandia.gov:80")
install.packages("dplyr")
options(internet.info = 0)
install.packages("dplyr")
install.packages("dplyr")
options(internet.info = 0)
install.packages("dplyr")
Sys.setenv(http_proxy = "http://proxy.sandia.gov:80/")
options(internet.info = 0)
install.packages("dplyr")
file.edit('~/.Renviron')
example(stan_model, package = "rstan", run.dontrun = TRUE)
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("snfa")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages(c("StanHeaders","rstan"),type="source")
install.packages(c("StanHeaders","rstan"),type="source")
example(stan_model, package = "rstan", run.dontrun = TRUE)
Sys.getenv("BINPREF")
Sys.which("make")
Sys.which("make")
Sys.which("make")
library(snfa)
data(univariate)
#Set up data for fitting
X <- as.matrix(univariate$x)
y <- univariate$y
N.fit <- 100
X.fit <- as.matrix(seq(min(X), max(X), length.out = N.fit))
#Reflect data for fitting
reflected.data <- reflect.data(X, y)
X.eval <- reflected.data$X
y.eval <- reflected.data$y
library(ggplot2)
runif
Sys.which("make")
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
m
m^1000
m^10000
m^100000
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
m^10000
m = matrix(c(0, 0.5, -0.25,
0, 0, 0.75,
0, 0, 0),
byrow = TRUE)
v = c(1, 0, 0)
m
m = matrix(c(0, 0.5, -0.25,
0, 0, 0.75,
0, 0, 0),
nrow = 3, byrow = TRUE)
m
m %*% v
v %*% m
v %*% m %*% m
library(Matrix)
expm(m)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
isntall.packages("expm")
install.packages("expm")
install.packages("expm")
library(expm)
matpow
library(expm)
help(package = "expm")
m %^% 1000
m %^% 1
v %*% (m %^% 1)
v %*% (m %^% 2)
m = matrix(c(0, 0.75, 0,
0, 0, -0.5,
-0.25, 0, 0))
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
m
m %^% 1
m %^% 2
m %^% 3
m %^% 4
m %^% 10000
abs(m) %^% 10000
v = rep(1/3, 3)
v = matrix(rep(1/3, 3), ncol = 1)
m %*% v
v = matrix(c(1, 0, 0), ncol = 1)
m %*% v
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
v
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
# v = matrix(rep(1/3, 3), ncol = 1)
v = matrix(c(1, 1, 0), ncol = 1)
v = m %*% v
v = squash(v)
# v = matrix(rep(1/3, 3), ncol = 1)
v = matrix(c(1, 1, 0), ncol = 1)
v = m %*% v
squash = function(x) 2 / (1 + exp(-lambda * x)) - 0.5
m = matrix(c(0, 0.75, -0.5,
0, 0, -0.5,
-0.25, 0, 0),
nrow = 3, byrow = TRUE)
# v = matrix(rep(1/3, 3), ncol = 1)
v = matrix(c(1, 1, 0), ncol = 1)
v = m %*% v
v = squash(v)
squash = function(x) 2 / (1 + exp(-lambda * x)) - 1
m = matrix(c(0, 0.75, -0.5,
0, 0, -0.5,
-0.25, 0, 0),
nrow = 3, byrow = TRUE)
# v = matrix(rep(1/3, 3), ncol = 1)
v = matrix(c(1, 1, 0), ncol = 1)
num.iter = 10
v = m %*% v
v = squash(v)
# v = matrix(rep(1/3, 3), ncol = 1)
v = matrix(c(1, 1, 0), ncol = 1)
v = m %*% v
v
v = squash(v)
v
v = m %*% v
v = squash(v)
v = m %*% v
v = squash(v)
v = m %*% v
v = squash(v)
v = m %*% v
v = squash(v)
v = m %*% v
v = squash(v)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
result
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
library(ggplot2)
plot.df = data.frame(X = c(t(result)))
k = nrow(m)
plot.df = data.frame(X = c(t(result)),
variable = factor(rep(1:k, each = num.iter)))
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
plot.df
plot.df = data.frame(value = c(t(result)),
t = 1:(num.iter + 1),
variable = factor(rep(1:k, each = (num.iter + 1))))
ggplot(plot.df, aes(t, value)) +
geom_line(aes(color = variable)) +
theme_bw()
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
result
m
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/markov/markov_example.R", echo=TRUE)
result
source("~/git/Futures/gf-kt/fcm/example/momo_example.R", echo=TRUE)
m %^% 10
m %^% 100
m %^% 1000
source("~/git/Futures/gf-kt/fcm/example/momo_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/example/momo_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/example/momo_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/example/momo_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/example/momo_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/example/momo_example.R", echo=TRUE)
eigen(m)
source("~/git/Futures/gf-kt/fcm/example/momo_example.R", echo=TRUE)
eigen(m)
source("~/git/Futures/gf-kt/fcm/example/momo_example.R", echo=TRUE)
eigen(m)
eigen(m)$values
abs(eigen(m)$values)
source("~/git/Futures/gf-kt/fcm/example/momo_example.R", echo=TRUE)
source("~/git/Futures/gf-kt/fcm/example/momo_example.R", echo=TRUE)
install.packages("mgcv")
library(mgcv)
?pcls
250 * 5 / 60
250 * 7 / 60
library(snfa)
help(package = "snfa")
9537-6560
60/21.5
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("StanHeaders", repos = c("http://mc-stan.org/r-packages/", getOption("repos")))
remove.packages("StanHeaders")
install.packages("StanHeaders", repos = c("http://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("http://mc-stan.org/r-packages/", getOption("repos")))
library(rstan)
install.packages("StanHeaders", repos = c("http://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("http://mc-stan.org/r-packages/", getOption("repos")))
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("ggplto2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
example(stan_model, package = "rstan", run.dontrun = TRUE)
remove.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
example(stan_model, package = "rstan", run.dontrun = TRUE)
source("~/git/tyche/inverse_problem/lm/1_generate_data.R", echo=TRUE)
source("~/git/tyche/inverse_problem/lm/2_nuts_known_params.R", echo=TRUE)
traceplot(stan.fit)
stan.extract = extract(stan.fit)
names(stan.extract)
dim(stan.extract$X_i)
df.X = data.frame(X = X)
df.X
install.packages("tidyr")
library(tidyr)
